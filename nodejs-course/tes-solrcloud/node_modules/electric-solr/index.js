'use strict';

var path = require('path');
var fs = require('fs');
var https = require('https');
var url = require('url');
var environment = require('module-tsl-environment');
var solr = require('solr-client');
var pify = require('pify');

function solrComponent(options) {
    options = options || {};

    function start(config, endpoints, cb) {
        var promisify = options.promisify;
        var solrConfig = options && options.configKey ? config[options.configKey] : (config.solr || config);
        var params = parseUrl(getEndpoint(endpoints, solrConfig));
        var connectionConfig = (solrConfig.useHttps || solrConfig.useBasicAuth) ? assoc('secure', true, params) : params;
        var client = solr.createClient(connectionConfig);

        https.globalAgent.options.ca = [];
        https.globalAgent.options.ca.push(fs.readFileSync(path.resolve(__dirname, './certs/' + environment.name + '.pem')));

        if (solrConfig.useBasicAuth) {
            if (solrConfig.hasOwnProperty('useHttps') && !solrConfig.useHttps) {
                return cb(new Error('CONFIG ERROR - Inconsistent config: If you set useBasicAuth to true, useHttps must be true or excluded'));
            }
            if (!solrConfig.username || !solrConfig.password) {
                return cb(new Error("CONFIG ERROR - Username/password missing : If you set useBasicAuth, you must provide a username and password"));
            }
            client.basicAuth(solrConfig.username, solrConfig.password);
        }
        return cb(null, promisify ? promisifyClient(client) : client);
    }

    return {
        dependsOn: ['config', 'endpoints'],
        start: start
    };
}

function getEndpoint(endpoints, solrConfig) {
    var endpointPattern = solrConfig.endpointPattern;
    return endpoints.getSync(endpointPattern, environment, solrConfig);
}

function parseUrl(connectionString) {
    var params = url.parse(connectionString, true);
    return {
        host: params.hostname || 'localhost',
        port: params.port && parseInt(params.port) || 8983,
        core: params.query.core,
        path: params.query.path || '/',
        get_max_request_entity_size: params.get_max_request_entity_size || 500
    };
}

function promisifyClient(client) {
    // Hardcoded sync functions - needs to be kept in lock-step with solr-client :(
    var syncFunctions = ['basicAuth', 'unauth', 'createAddStream', 'createQuery'];
    function promisifyMethod(promisified, name) {
        var property = client[name];
        if (typeof property === 'function' && syncFunctions.indexOf(name) === -1) {
            promisified[name] = pify(property.bind(client));
        }
        return promisified;
    }
    return Object.keys(client.constructor.prototype).reduce(promisifyMethod, client);
}

function assoc(key, value, obj) {
    var newObj = {};
    for(var oKey in obj) {
        if (obj.hasOwnProperty(oKey)) {
            newObj[oKey] = obj[oKey];
        }
    }
    newObj[key] = value;
    return newObj;
}

module.exports = solrComponent;
