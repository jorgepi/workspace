'use strict';

var expect = require('expect.js');
var solr = require('..');
var mockEndpoints = {getSync: function() { return 'http://localhost:6983/?core=test'; }};

describe('#SOLR', function () {
    it('should start a service and return a client', function (done) {
        var service = solr({});
        service.start({}, mockEndpoints, function (err, client) {
            expect(client.options.host).to.be('localhost');
            expect(client.options.port).to.be(6983);
            expect(client.options.path).to.be('/');
            expect(client.options.core).to.be('test');
            expect(client.options.secure).to.be(false);
            return done(err);
        });
    });

    it('should start a service and return a promisified client', function (done) {
        var service = solr({ promisify: true });
        service.start({}, mockEndpoints, function (err, client) {
            expect(client.options.port).to.be(6983);
            expect(client.add().then).to.be.a(Function);
            return done(err);
        });
    });

    it('defaults to solr as the configKey', function (done) {
        var service = solr({ promisify: true });
        service.start( { solr: { useHttps: true } }, mockEndpoints, function (err, client) {
            // This is not a security test and secure is the only config that is not read by mocked endpoint
            expect(client.options.secure).to.be(true);
            return done(err);
        });
    });

    it('should use the config under the configKey when a configKey is provided', function (done) {
        var service = solr({ configKey: 'newSolr' });
        service.start({ newSolr: { useHttps: true }}, mockEndpoints, function (err, client) {
            expect(err).to.be.null;
            // This is not a security test and secure is the only config that is not read by mocked endpoint
            expect(client.options.secure).to.be(true);
            return done(err);
        });
    });
});
