'use strict';

var expect = require('expect.js');
var solr = require('..');
var mockSecureEndpoints = {getSync: function() { return 'https://localhost:6983/?core=test'; }};

describe('#SECURE-SOLR', function () {
    it('should return a client with secure set to true when useHttps flag is set', function (done) {
        var service = solr({});
        service.start({ useHttps: true }, mockSecureEndpoints, function (err, client) {
            expect(client.options.secure).to.be(true);
            return done(err);
        });
    });

    it('should enforce an HTTPS connection if useBasicAuth flag is set', function (done) {
        var service = solr({});
        service.start({ useBasicAuth: true, username: "test", password: "test" }, mockSecureEndpoints, function (err, client) {
            expect(client.options.secure).to.be(true);
            return done(err);
        });
    });

    it('should return an error if useBasicAuth flag is set but no credentials are provided', function (done) {
        var service = solr({});
        service.start({ useBasicAuth: true }, mockSecureEndpoints, function (err, client) {
            expect(err.message).to.be('CONFIG ERROR - Username/password missing : If you set useBasicAuth, you must provide a username and password');
            return done();
        });
    });

    it('should return an error if useBasicAuth flag is set but useHttps is explicitly set to false', function (done) {
        var service = solr({});
        service.start({ useBasicAuth: true, useHttps: false }, mockSecureEndpoints, function (err, client) {
            expect(err.message).to.be('CONFIG ERROR - Inconsistent config: If you set useBasicAuth to true, useHttps must be true or excluded');
            return done();
        });
    });

    // Without starting a docker container or injecting a solr client it is not possible to test if basic auth was used.
    it('should return a client when useBasicAuth flag is set and credentials are provided', function (done) {
        var service = solr({});
        service.start({ useBasicAuth: true, username: "test", password: "test" }, mockSecureEndpoints, function (err, client) {
            expect(err).to.be.null;
            expect(client.options.host).to.be('localhost');
            return done(err);
        });
    });

});
